
" must be mapped early.
let mapleader = ';'
let g:mapleader = ';'


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%  plugins  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" convenience bindings
nmap <Leader>ps :source %<cr>
nmap <Leader>pS :PlugStatus<cr>
nmap <Leader>pc :PlugClean<cr>
nmap <Leader>pu :PlugUpgrade<cr>:PlugUpdate<cr>

" automatic plugin installation
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif
call plug#begin('~/.vim/vim-plug')

Plug 'editorconfig/editorconfig-vim'
Plug 'conradirwin/vim-bracketed-paste'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'godlygeek/tabular'
Plug 'tpope/vim-fugitive'

" abbreviations and plugins to automatically complete closing syntaxes.
" generally a good idea to let Vim do the repetitive typing when possible.
" occasionally makes trouble when closing braces; just copy another then.

Plug 'alvan/vim-closetag'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-endwise'
iab <% <% %><esc>F%hi
iab <%= <%= %><esc>F%hi
iab <%# <%# %><esc>F%hi

" in-editor approximations of colors that aren't terribly accurate.
" usually enough to save looking up the color somewhere else though.
" ;c to toggle the colorization, off by default due to regex slowness.

Plug 'lilydjwg/colorizer'
let g:colorizer_startup = 0
nmap <silent> <Leader>c :ColorToggle<cr>

" this automatically corrects most common typos from typing too quickly.
" opt-ins for documentation files, so that it doesn't interfere otherwise.
" ;sc to toggle the built-in spellcheck, off by default due to coloring.

Plug 'reedes/vim-litecorrect'
au FileType mkd,markdown,tex,html,text call litecorrect#init()
nmap <silent> <Leader>sc :setlocal spell!<cr>

" ;d to expand the error details (q to exit).
" ;n to jump to the next error location.
" ;N to jump to the previous error location.

Plug 'w0rp/ale'
nmap <Leader>d :ALEDetail<cr>
nmap <Leader>n :lnext<cr>
nmap <Leader>N :lprev<cr>

" jumping around more efficiently, an absolute *must*.
" ;l to jump by word to anything on the screen.
" ;j to jump downwards by lines on the screen.
" ;k to jump upwards by lines on the screen.

Plug 'easymotion/vim-easymotion'
let g:EasyMotion_verbose = 0
nmap <silent> <Leader>j <Leader><Leader>j
nmap <silent> <Leader>k <Leader><Leader>k
nmap <silent> <Leader>l <Plug>(easymotion-bd-w)

" toggling of comments across languages, an absolute *must*.
" ;i to toggle comment on line or selected visual block.

Plug 'tpope/vim-commentary'
nmap <silent> <Leader>i gcc
vmap <silent> <Leader>i gc

" improved gitgutter, an absolute *must*.
" ;sj to jump to the next changed hunk
" ;sk to jump to the previous changed hunk
" signature shows marks in the same column.

Plug 'mhinz/vim-signify'
Plug 'kshenoy/vim-signature'
let g:signify_vcs_list = ['git']
let g:signify_sign_show_count = 0
let g:signify_line_highlight = 0
nmap <silent> <Leader>sj <plug>(signify-next-hunk)
nmap <silent> <Leader>sk <plug>(signify-prev-hunk)

" tab filters through files, gitignoring if appropriate.
" ;tab filters through ripgrep across the repository files.

Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
let g:fzf_layout = { 'down': '~25%' }
nmap <tab> :call Fallback()<cr>
nmap <Leader><tab> :Rg<cr>
function! Fallback()
  execute system('git rev-parse --is-inside-work-tree') =~ 'true' ? 'GFiles' : 'Files'
endfunction

" tab in insert on whitespace produces whitespace, obviously.
" tab in insert on partial text attempts to complete with the plugins.
" fallback is attempts to compete with words from the active buffer.
" tab, shift+tab to move through the completion suggestions menu.

Plug 'ervandew/supertab'
let g:SuperTabDefaultCompletionType = "context"

" improved Nix integration
Plug 'lnl7/vim-nix'

" improved Elixir integration
Plug 'elixir-lang/vim-elixir'

" Plug 'zah/nim.vim'
" Plug 'rhysd/vim-crystal'
" Plug 'elmcast/elm-vim'
" Plug 'ziglang/zig.vim'

Plug 'pangloss/vim-javascript'
Plug 'evanleck/vim-svelte', {'branch': 'main'}

" markdown tweaks to improve folding in large documents with nested headers.
" also, disable some absurd nonsensical defaults that that plugin ships with.

Plug 'plasticboy/vim-markdown'
let g:vim_markdown_conceal = 0
let g:vim_markdown_new_list_item_indent = 0
au BufEnter *.md setlocal foldexpr=MarkdownLevel()
au BufEnter *.md setlocal foldmethod=expr
function! MarkdownLevel()
  let h = matchstr(getline(v:lnum), '^#\+')
  if empty(h)
    return "="
  else
    return ">" . len(h)
  endif
endfunction

call plug#end()


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%  settings  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" general interface groundwork settings
set nocursorline number noerrorbells signcolumn=yes shortmess=aoO

" things should work as expected elsewhere
set mouse= magic backspace=eol,start,indent linebreak breakindent

" omnicomplete enable and ignore nonsense
set wildignore+=*.aux,*.out.*.toc
set wildignore+=*.bmp,*.gif,*.ico,*.jpg,*.jpeg,*.png
set wildignore+=*.avi,*.m4a,*.mp3,*.oga,*.ogg,*.wav,*.webm
set wildignore+=*.eot,*.otf,*.ttf,*.woff,*.woff2
set wildignore+=*.doc,*.pdf
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.rar,*.tar.xz
set wildignore+=*.o,*.obj,*.exe,*.dll,*.jar,*.rbc,*.pyc,*.class
set wildignore+=*.min.*,*-min.*
set wildignore+=*.swp,.lock,.DS_Store,._*
set wildignore+=*generated
set wildignore+=.git/*

" filetype, encoding, backup, undo related
set autoread noswapfile nobackup undolevels=1000 encoding=utf8 ffs=unix

" searching highlighting and sensitivity
set hlsearch incsearch smartcase infercase ignorecase wildmenu

" indentation spaces tabs and whitespace nonsense
set list listchars=tab:\ \ ,trail:␣,extends:»,precedes:«,nbsp:•
set autoindent smartindent copyindent shiftround smarttab
set tabstop=2 shiftwidth=2 softtabstop=2 expandtab

" various tweaks for when multiple panes are open
set scrolloff=2 fillchars+=vert:│ textwidth=120 fo=cqtn
set splitbelow splitright equalalways eadirection=both

" deal with frustrating folding nonsense
set foldenable foldnestmax=4 foldmethod=syntax

" simplistic statuslines; use Ctrl+G
" set laststatus=1 statusline=%f\ %m%=%l
set hidden noruler rulerformat=%6(%=%l%)

" (apparently this is an arbitrary code execution vector)
set nomodeline

" colorscheme
set notermguicolors
syntax enable
set synmaxcol=512

" syntax lag mitigation
syntax sync minlines=256
set synmaxcol=200


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%  keybindings  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" disabled
nmap s <nop>
nmap <Up> <nop>
nmap <Down> <nop>
nmap <Left> <nop>
nmap <Right> <nop>
nmap q: <esc>

" movements
nmap <C-j> zRddp==
nmap <C-k> zRddkP==
imap <C-j> <Esc><A-j>i
imap <C-k> <Esc><A-k>i
vmap <C-j> zR:m'>+1<CR>gv=gv
vmap <C-k> zR:m'<-2<CR>gv=gv
vnoremap > ><cr>gv
vnoremap < <<cr>gv

" rewrap paragraph
nmap <Leader>g gwap

" splits & buffers
nmap <silent> <Leader>wv <c-w>v
nmap <silent> <Leader>ws <c-w>s
nmap <silent> <Leader>wc <c-w>c
nmap <silent> <Leader>ww <c-w><c-w>
nmap <silent> g; :bn<cr>
nmap <silent> gj :bp<cr>
nmap <silent> B :b#<cr>

" folding
nmap sf za
nmap si zMzv
nmap sj zj
nmap sk zk
nmap sl zM
nmap sL zR

" etcetera
nmap <silent>\ :silent noh<cr>
command! Wq wq
command! W w
command! Q q
nmap 0 ^

" (patched) scrolling
nmap <silent> J :set scroll=3<cr><c-d>
nmap <silent> K :set scroll=3<cr><c-u>
vmap J 2j
vmap K 2k

" fix macro and garbled text issues
set timeout timeoutlen=400
set nottimeout ttimeoutlen=-1

" abbreviations
iab resumeh résumé
iab fixme FIXME
iab Fixme FIXME
iab FIXEM FIXME
iab fixem FIXME


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%  functions  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" tabularize automatically when using pipe tables
inoremap<silent> <bar> <bar><esc>:call <sid>align()<cr>a
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if getline('.')=~#'^\s*|' && (getline(line('.')-1)=~#p || getline(line('.')+1)=~#p)
    let colu = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let posi = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',colu).'\s\{-\}'.repeat('.',posi),'ce',line('.'))
  endif
endfunc


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%  autocmds  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

" https://stackoverflow.com/q/2142402
" save & restore folding on per-file basis
" FIXME: this throws an error on the location list.
" au BufWinLeave ?* mkview
" au BufWinEnter ?* silent loadview

" disable formatoptions nonsense
au FileType * set fo-=r fo-=o

" universally highlight markers, regardless of ft/placing
au Syntax * call matchadd('Todo', 'TODO\|FIXME\|NOTE', -1)


"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%  colorscheme  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

set background=dark
hi clear
if exists("syntax_on")
  syntax reset
endif

" override various elements to use term colors
hi! Normal ctermfg=none ctermbg=none cterm=none
hi! Comment ctermfg=8 ctermbg=none cterm=none
hi! Underlined ctermfg=none ctermbg=none cterm=underline
hi! Cursor ctermfg=none ctermbg=none cterm=none
hi! CursorLine ctermfg=none ctermbg=none cterm=none
hi! StatusLine ctermfg=7 ctermbg=none cterm=none
hi! StatusLineNC ctermfg=8 ctermbg=none cterm=none
hi! Error ctermfg=1 ctermbg=0 cterm=none
hi! LineNr ctermfg=8 ctermbg=0 cterm=none
hi! CursorLineNr ctermfg=none ctermbg=none cterm=none
hi! Directory ctermfg=4 ctermbg=none cterm=none
hi! Pmenu ctermfg=8 ctermbg=none cterm=none
hi! PmenuSel ctermfg=none ctermbg=none cterm=none
hi! WildMenu ctermfg=none ctermbg=0 cterm=underline
hi! SpellCap ctermfg=1 ctermbg=none cterm=underline
hi! Visual ctermfg=none ctermbg=none cterm=reverse
hi! NonText ctermfg=8 ctermbg=none cterm=none
hi! MatchParen ctermfg=none ctermbg=8 cterm=underline
hi! Folded ctermfg=7 ctermbg=none cterm=none
hi! Special ctermfg=none ctermbg=none cterm=none
hi! Question ctermfg=2 ctermbg=none cterm=none
hi! MoreMsg ctermfg=14 ctermbg=none cterm=none
hi! Title ctermfg=12 ctermbg=none cterm=none
hi! Todo ctermfg=9 ctermbg=none cterm=none

" ditto, but these control the visible majority
hi! Identifier ctermfg=14 ctermbg=none cterm=none
hi! Type ctermfg=14 ctermbg=none cterm=none
hi! Statement ctermfg=4 ctermbg=none cterm=none
hi! Constant ctermfg=10 ctermbg=none cterm=none
hi! String ctermfg=10 ctermbg=none cterm=none
hi! PreProc ctermfg=11 ctermbg=none cterm=none

" prefer non-reverse coloring for diffs
hi! DiffAdd ctermfg=2 ctermbg=none cterm=none
hi! DiffChange ctermfg=3 ctermbg=none cterm=none
hi! DiffDelete ctermfg=1 ctermbg=none cterm=none
hi! DiffText ctermfg=4 ctermbg=none cterm=none

" prefer uniform coloring for the diff column
hi! SignifySignAdd ctermfg=15 ctermbg=none cterm=none
hi! SignifySignDelete ctermfg=15 ctermbg=none cterm=none
hi! SignifySignChange ctermfg=15 ctermbg=none cterm=none
hi! SignifySignChangeDelete ctermfg=15 ctermbg=none cterm=none

" simpler to link these
hi! link Search Visual
hi! link IncSearch Visual
hi! link ModeMsg NonText
hi! link VisualNOS Visual
hi! link SpellBad Error
hi! link SpellLocal Normal
hi! link PmenuSbar Pmenu
hi! link PmenuThumb Pmenu
hi! link ColorColumn Normal
hi! link SignColumn Normal
hi! link FoldColumn Normal
hi! link VertSplit StatusLine
hi! link WarningMsg Error
hi! link ErrorMsg Error
hi! link SpecialKey Comment

" highlight easymotion targets clearly
hi! link EasyMotionTarget SignifySignChange
hi! link EasyMotionTarget2First SignifySignChange
hi! link EasyMotionTarget2Second SignifySignChange
hi! link EasyMotionShade NonText

" distinguish between errors and warnings
hi ALEWarning ctermfg=11
hi ALEWarningSign ctermfg=11
hi ALEStyleWarning ctermfg=11
hi ALEStyleWarningSign ctermfg=11
hi ALEInfo ctermfg=11
hi ALEInfoSign ctermfg=11
